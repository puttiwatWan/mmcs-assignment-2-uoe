model RefuellingStation
  uses "mmxprs", "mmquad"

  declarations
    nbCustomers: integer  !! number of refuelling stations
    nbSupply: integer     !! number of centralised facilities
    nbLocalised: integer  !! number of localised facility type
  end-declarations

  initialisations from "Dataset1_N25.txt"
	  nbCustomers nbSupply nbLocalised
  end-initialisations

  declarations
    customers = 1..nbCustomers  !! range of refuelling stations
    supply = 1..nbSupply        !! range of centralised facilities
    locationPoint = 1..2        !! Latitude and longigude
    locFacType: set of string

    Demand: array(customers) of real
    DistCustomerSupply: array(customers, supply) of real
    DistCustomer: array(customers, customers) of real
    SiteLocation: array(customers, locationPoint) of real
    SupplyLocation: array(supply, locationPoint) of real

    LocProdLimit: array(locFacType) of real
    MinLocProd: array(locFacType) of real
    CenProdLimit: real
    MaxTubePerSite: integer
    TubeCap: real

    station_open: array(customers) of mpvar  !! binary
    cen_fac_open: array(supply) of mpvar     !! binary

    ! can combine
    loc_fac_open_at: array(customers,locFacType) of mpvar     !! binary

    cen_prod: array(supply, customers) of mpvar
    loc_prod: array(customers, locFacType) of mpvar

    canCover: array(customers, customers) of integer
    cover: array(customers, customers) of mpvar
  end-declarations

  initialisations from "Dataset1_N25.txt"
    Demand DistCustomerSupply DistCustomer SiteLocation SupplyLocation locFacType
    LocProdLimit MinLocProd CenProdLimit MaxTubePerSite TubeCap
  end-initialisations

  ! calculate cover range for each customer
  forall(c1 in customers, c2 in customers) do
    if(DistCustomer(c1,c2) <= 20) then
      canCover(c1,c2) := 1
    else
      canCover(c1,c2) := 0
    end-if
  end-do

  ! Objective function


  ! Constraints
  !! should be binary
  forall(c in customers) station_open(c) is_binary
  forall(c in customers, t in locFacType) loc_fac_open_at(c,t) is_binary
  forall(s in supply) cen_fac_open(s) is_binary
  forall(c1 in customers, c2 in customers) cover(c1,c2) is_binary

  ! open limit
  sum(s in supply) cen_fac_open(s) <= 3
  sum(c in customers, t in locFacType) loc_fac_open_at(c,t) <= 1

  ! prod limit
  forall(s in supply) sum(c in customers)cen_prod(s,c) <= CenProdLimit
  forall(c in customers, t in locFacType) do
    loc_prod(c,t) <= loc_fac_open_at(c,t) * LocProdLimit(t)
    loc_prod(c,t) >= loc_fac_open_at(c,t) * MinLocProd(t)
  end-do

  ! demand
  forall(c in customers) sum(s in supply) cen_prod(s,c) <= MaxTubePerSite * TubeCap
  forall(c2 in customers) sum(c1 in customers) cover(c1,c2) = 1  !! each station can be covered by only 1 station

  forall(c1 in customers) do
    (sum(c2 in customers)(Demand(c2) * cover(c1,c2))) <= sum(s in supply)cen_prod(s,c1) + sum(t in locFacType)(loc_prod(c1, t))
  end-do


  writeln("Begin running model")
  !...
  writeln("End running model")
end-model
